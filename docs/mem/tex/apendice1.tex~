\section{Modulo Simpson}
\label{Apendice1:Simpson}

\begin{center}
\begin{footnotesize}
\begin{verbatim}
##################################################################################
# Fichero: simpson.py
###################################################################################
# Modulo: Simpson 
#
# Contenido: Funciones de aplicacion de la regla de Simpson de integracion numerica. 
#
# Autor/es: Adrian R. Mendioroz Morales
#           Roberto C. Palenzuela Criado
###################################################################################
# Funciones:
#   regla_simpson: Calcula una aproximacion a la integral de una funcion en un 
#                  intervalo [a,b], aplicando la regla de Simpson.
#      Entrada:
#         f: funcion que se va a aproximar
#         a: limite inferior de integracion
#         b: limite superior de integracion
#      Salida:
#         Aproximacion de la integral de f en [a,b]
# 
#   regla_simpson_compuesta: Calcula una aproximacion a la integral de una función en un 
#                            intervalo [a,b], empleando n subintervalos y aplicando la 
#                            regla de Simpson compuesta.
#      Entrada:
#         f: funcion que se va a aproximar
#         a: limite inferior de integracion
#         b: limite superior de integracion
#         n: numero (par) de subintervalos
#      Salida:
#         Aproximacion de la integral de f en [a,b]
###################################################################################
# Fecha de creacion: 06 de mayo de 2013
###################################################################################

from math import *

def regla_simpson(f,a,b):
  return (b-a)/6.0*(f(a)+4*f((a+b)/2.0)+f(b))
  
def regla_simpson_compuesta(f,a,b,n):
  h=(b-a)/float(n)
  aprox=0
  for l in range(0,n):
    aprox+=regla_simpson(lambda x:(x**2*cos(x)),a+l*h,a+(l+1)*h)
  return aprox
\end{verbatim}
\end{footnotesize}
\end{center}

\section{Algoritmo error}
\label{Apendice1:error}

\begin{center}
  \begin{footnotesize}
    \begin{verbatim}
      #! /usr/bin/python
      ###################################################################################
      # Fichero: uso_simpson.py
      ###################################################################################
      #
      # Contenido: Comprobacion de los errores cometidos al aplicar la regla de Simpson
      #            simple y compuesta a la función f(x)=x**2*cos(x), en el intervalo
      #            [a,b].
       #
# Autor/es: Adrian R. Mendioroz Morales
#           Roberto C. Palenzuela Criado
#
###################################################################################
# Fecha de creacion: 06 de mayo de 2013 
###################################################################################

from simpson import regla_simpson, regla_simpson_compuesta
from math import *

F=(2*3*cos(3)+(3**2-2)*sin(3))-(2*1*cos(1)+(1**2-2)*sin(1))
print '\nValor real= ',F

aprox=regla_simpson(lambda x:(x**2*cos(x)),1,3)
print '\nAproximacion por la regla de Simpson: ',aprox
print '\t\t      Error absoluto: ', abs(F-aprox)
print '\t\t      Error relativo: ', abs(F-aprox)/abs(F)

print '\nAproximacion por la regla de Simpson compuesta: '
print '%25s %15s %15s %15s' % ('Numero de subintervalos','Aproximacion','Error absoluto',
'Error relativo')
n=[2,6,10,50,100]
aprox=0
i=0
for l in n:
  aprox=regla_simpson_compuesta(lambda x:(x**2*cos(x)),1,3,l)
  print '%16d %24.10f %15.10f %15.10f' %(n[i],aprox,abs(F-aprox),abs(F-aprox)/abs(F))
  i=i+1
print "\n"
\end{verbatim}
\end{footnotesize}
\end{center}
