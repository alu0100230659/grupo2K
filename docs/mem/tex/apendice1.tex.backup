\section{Grafica}
\label{Apendice1:grafica}

\begin{center}
\begin{footnotesize}
\begin{verbatim}
##################################################################################
# Fichero: simpson.py
###################################################################################
# Modulo: Simpson 
#
# Contenido: Funciones de aplicacion de la regla de Simpson de integracion numerica. 
#
# Autor/es: Adrian R. Mendioroz Morales
#           Roberto C. Palenzuela Criado
###################################################################################
# Funciones:
#   regla_simpson: Calcula una aproximacion a la integral de una funcion en un 
#                  intervalo [a,b], aplicando la regla de Simpson.
#      Entrada:
#         f: funcion que se va a aproximar
#         a: limite inferior de integracion
#         b: limite superior de integracion
#      Salida:
#         Aproximacion de la integral de f en [a,b]
# 
#   regla_simpson_compuesta: Calcula una aproximacion a la integral de una funcion en un 
#                            intervalo [a,b], empleando n subintervalos y aplicando la 
#                            regla de Simpson compuesta.
#      Entrada:
#         f: funcion que se va a aproximar
#         a: limite inferior de integracion
#         b: limite superior de integracion
#         n: numero (par) de subintervalos
#      Salida:
#         Aproximacion de la integral de f en [a,b]
###################################################################################
# Fecha de creacion: 06 de mayo de 2013
###################################################################################

from math import cos
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
import numpy as np
from matplotlib.pylab import *

def f(t):
  return t**2*cos(t)

t = linspace(-1, 3.5, 51)  # 51 puntos entre 0 y 3
y = zeros(len(t))       # reserva memoria para y con elementos flotantes
for i in xrange(len(t)):
  y[i] = f(t[i])

fig = plt.figure(1)
ax = fig.add_subplot(111) 
# set up axis
ax.spines['left'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position('zero')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
 
plot(t,y)
xlabel('x')
ylabel('y')
legend(['f(x)=x^2*cos(x)'],'best')
axis([-1,3.5, -10, 2])  #[tmin, tmax, ymin, ymax]
savefig('grafica.eps')
show()
\end{verbatim}
\end{footnotesize}
\end{center}

\section{Algoritmo error}
\label{Apendice1:error}

\begin{center}
\begin{footnotesize}
\begin{verbatim}
#! /usr/bin/python
###################################################################################
# Fichero: uso_simpson.py
###################################################################################
#
# Contenido: Comprobacion de los errores cometidos al aplicar la regla de Simpson
#            simple y compuesta a la funcion f(x)=x**2*cos(x), en el intervalo
#            [a,b].
#
# Autor/es: Adrian R. Mendioroz Morales
#           Roberto C. Palenzuela Criado
#
###################################################################################
# Fecha de creacion: 06 de mayo de 2013 
###################################################################################

from simpson import regla_simpson, regla_simpson_compuesta
from math import *

F=(2*3*cos(3)+(3**2-2)*sin(3))-(2*1*cos(1)+(1**2-2)*sin(1))
print '\nValor real= ',F

aprox=regla_simpson(lambda x:(x**2*cos(x)),1,3)
print '\nAproximacion por la regla de Simpson: ',aprox
print '\t\t      Error absoluto: ', abs(F-aprox)
print '\t\t      Error relativo: ', abs(F-aprox)/abs(F)

print '\nAproximacion por la regla de Simpson compuesta: '
print '%25s %15s %15s %15s' % ('Numero de subintervalos','Aproximacion','Error absoluto',
'Error relativo')
n=[2,6,10,50,100]
aprox=0
i=0
for l in n:
  aprox=regla_simpson_compuesta(lambda x:(x**2*cos(x)),1,3,l)
  print '%16d %24.10f %15.10f %15.10f' %(n[i],aprox,abs(F-aprox),abs(F-aprox)/abs(F))
  i=i+1
print "\n"
\end{verbatim}
\end{footnotesize}
\end{center}
